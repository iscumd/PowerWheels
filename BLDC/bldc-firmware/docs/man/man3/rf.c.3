.TH "nrf/rf.c" 3 "Wed Sep 16 2015" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nrf/rf.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'rf\&.h'\fP
.br
\fC#include 'spi_sw\&.h'\fP
.br
\fC#include 'ch\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBrf_init\fP (void)"
.br
.ti -1c
.RI "void \fBrf_set_speed\fP (\fBNRF_SPEED\fP speed)"
.br
.ti -1c
.RI "void \fBrf_set_power\fP (\fBNRF_POWER\fP power)"
.br
.ti -1c
.RI "void \fBrf_set_address_width\fP (\fBNRF_AW\fP aw)"
.br
.ti -1c
.RI "void \fBrf_set_crc_type\fP (\fBNRF_CRC\fP crc_type)"
.br
.ti -1c
.RI "void \fBrf_set_retr_retries\fP (int retries)"
.br
.ti -1c
.RI "void \fBrf_set_retr_delay\fP (\fBNRF_RETR_DELAY\fP delay)"
.br
.ti -1c
.RI "void \fBrf_set_rx_addr\fP (int pipe, const char *address, int addr_len)"
.br
.ti -1c
.RI "void \fBrf_set_tx_addr\fP (const char *address, int addr_len)"
.br
.ti -1c
.RI "void \fBrf_write_tx_payload\fP (const char *data, int length)"
.br
.ti -1c
.RI "void \fBrf_write_tx_payload_no_ack\fP (const char *data, int length)"
.br
.ti -1c
.RI "void \fBrf_write_ack_payload\fP (int pipe, const char *data, int length)"
.br
.ti -1c
.RI "void \fBrf_read_rx_payload\fP (char *data, int length)"
.br
.ti -1c
.RI "void \fBrf_set_frequency\fP (int freq)"
.br
.ti -1c
.RI "int \fBrf_get_frequency\fP (void)"
.br
.ti -1c
.RI "int \fBrf_get_address_width\fP (void)"
.br
.ti -1c
.RI "void \fBrf_power_up\fP (void)"
.br
.ti -1c
.RI "void \fBrf_power_down\fP (void)"
.br
.ti -1c
.RI "void \fBrf_mode_tx\fP (void)"
.br
.ti -1c
.RI "void \fBrf_mode_rx\fP (void)"
.br
.ti -1c
.RI "void \fBrf_enable_pipe_autoack\fP (int pipes)"
.br
.ti -1c
.RI "void \fBrf_enable_pipe_address\fP (int pipes)"
.br
.ti -1c
.RI "void \fBrf_enable_pipe_dlp\fP (int pipes)"
.br
.ti -1c
.RI "void \fBrf_enable_features\fP (int features)"
.br
.ti -1c
.RI "void \fBrf_flush_tx\fP (void)"
.br
.ti -1c
.RI "void \fBrf_flush_rx\fP (void)"
.br
.ti -1c
.RI "void \fBrf_flush_all\fP (void)"
.br
.ti -1c
.RI "void \fBrf_clear_irq\fP (void)"
.br
.ti -1c
.RI "void \fBrf_clear_rx_irq\fP (void)"
.br
.ti -1c
.RI "void \fBrf_clear_tx_irq\fP (void)"
.br
.ti -1c
.RI "void \fBrf_clear_maxrt_irq\fP (void)"
.br
.ti -1c
.RI "int \fBrf_get_payload_width\fP (void)"
.br
.ti -1c
.RI "int \fBrf_status\fP (void)"
.br
.ti -1c
.RI "int \fBrf_fifo_status\fP (void)"
.br
.ti -1c
.RI "int \fBrf_rx_power_detect\fP (void)"
.br
.ti -1c
.RI "void \fBrf_write_reg\fP (int reg, const char *data, int len)"
.br
.ti -1c
.RI "void \fBrf_write_reg_byte\fP (int reg, char data)"
.br
.ti -1c
.RI "void \fBrf_read_reg\fP (int reg, char *data, int len)"
.br
.ti -1c
.RI "char \fBrf_read_reg_byte\fP (int reg)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void rf_clear_irq (void)"

.SS "void rf_clear_maxrt_irq (void)"

.SS "void rf_clear_rx_irq (void)"

.SS "void rf_clear_tx_irq (void)"

.SS "void rf_enable_features (int features)"

.SS "void rf_enable_pipe_address (int pipes)"

.SS "void rf_enable_pipe_autoack (int pipes)"

.SS "void rf_enable_pipe_dlp (int pipes)"

.SS "int rf_fifo_status (void)"

.SS "void rf_flush_all (void)"

.SS "void rf_flush_rx (void)"

.SS "void rf_flush_tx (void)"

.SS "int rf_get_address_width (void)"

.SS "int rf_get_frequency (void)"

.SS "int rf_get_payload_width (void)"

.SS "void rf_init (void)"

.SS "void rf_mode_rx (void)"

.SS "void rf_mode_tx (void)"

.SS "void rf_power_down (void)"

.SS "void rf_power_up (void)"

.SS "void rf_read_reg (int reg, char * data, int len)"

.SS "char rf_read_reg_byte (int reg)"

.SS "void rf_read_rx_payload (char * data, int length)"

.SS "int rf_rx_power_detect (void)"

.SS "void rf_set_address_width (\fBNRF_AW\fP aw)"

.SS "void rf_set_crc_type (\fBNRF_CRC\fP crc_type)"

.SS "void rf_set_frequency (int freq)"

.SS "void rf_set_power (\fBNRF_POWER\fP power)"

.SS "void rf_set_retr_delay (\fBNRF_RETR_DELAY\fP delay)"

.SS "void rf_set_retr_retries (int retries)"

.SS "void rf_set_rx_addr (int pipe, const char * address, int addr_len)"

.SS "void rf_set_speed (\fBNRF_SPEED\fP speed)"

.SS "void rf_set_tx_addr (const char * address, int addr_len)"

.SS "int rf_status (void)"

.SS "void rf_write_ack_payload (int pipe, const char * data, int length)"

.SS "void rf_write_reg (int reg, const char * data, int len)"

.SS "void rf_write_reg_byte (int reg, char data)"

.SS "void rf_write_tx_payload (const char * data, int length)"

.SS "void rf_write_tx_payload_no_ack (const char * data, int length)"

.SH "Author"
.PP 
Generated automatically by Doxygen from the source code\&.
