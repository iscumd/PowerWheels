.TH "nrf/rf.h" 3 "Wed Sep 16 2015" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nrf/rf.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBNRF_STATUS_TX_FULL\fP   (1<<0)"
.br
.ti -1c
.RI "#define \fBNRF_STATUS_RX_P_NO\fP   (1<<1 | 1<<2 | 1<<3)"
.br
.ti -1c
.RI "#define \fBNRF_STATUS_MAX_RT\fP   (1<<4)"
.br
.ti -1c
.RI "#define \fBNRF_STATUS_TX_DS\fP   (1<<5)"
.br
.ti -1c
.RI "#define \fBNRF_STATUS_RX_DR\fP   (1<<6)"
.br
.ti -1c
.RI "#define \fBNRF_STATUS_IRQ\fP   (\fBNRF_STATUS_MAX_RT\fP | \fBNRF_STATUS_TX_DS\fP | \fBNRF_STATUS_RX_DR\fP)"
.br
.ti -1c
.RI "#define \fBNRF_STATUS_GET_TX_FULL\fP(s)   (s & \fBNRF_STATUS_TX_FULL\fP)"
.br
.ti -1c
.RI "#define \fBNRF_STATUS_GET_RX_P_NO\fP(s)   ((s & \fBNRF_STATUS_RX_P_NO\fP) >> 1)"
.br
.ti -1c
.RI "#define \fBNRF_STATUS_GET_MAX_RT\fP(s)   ((s & \fBNRF_STATUS_MAX_RT\fP) >> 4)"
.br
.ti -1c
.RI "#define \fBNRF_STATUS_GET_TX_DS\fP(s)   ((s & \fBNRF_STATUS_TX_DS\fP) >> 5)"
.br
.ti -1c
.RI "#define \fBNRF_STATUS_GET_RX_DR\fP(s)   ((s & \fBNRF_STATUS_RX_DR\fP) >> 6)"
.br
.ti -1c
.RI "#define \fBNRF_FIFO_RX_EMPTY\fP   (1<<0)"
.br
.ti -1c
.RI "#define \fBNRF_FIFO_RX_FULL\fP   (1<<1)"
.br
.ti -1c
.RI "#define \fBNRF_FIFO_TX_EMPTY\fP   (1<<4)"
.br
.ti -1c
.RI "#define \fBNRF_FIFO_TX_FULL\fP   (1<<5)"
.br
.ti -1c
.RI "#define \fBNRF_CONFIG_PRIM_RX\fP   (1<<0)"
.br
.ti -1c
.RI "#define \fBNRF_CONFIG_PWR_UP\fP   (1<<1)"
.br
.ti -1c
.RI "#define \fBNRF_CONFIG_CRCO\fP   (1<<2)"
.br
.ti -1c
.RI "#define \fBNRF_CONFIG_EN_CRC\fP   (1<<3)"
.br
.ti -1c
.RI "#define \fBNRF_CONFIG_MASK_MAX_RT\fP   (1<<4)"
.br
.ti -1c
.RI "#define \fBNRF_CONFIG_MASK_TX_DS\fP   (1<<5)"
.br
.ti -1c
.RI "#define \fBNRF_CONFIG_MASK_RX_DR\fP   (1<<6)"
.br
.ti -1c
.RI "#define \fBNRF_FEATURE_DYN_ACK\fP   (1<<0)"
.br
.ti -1c
.RI "#define \fBNRF_FEATURE_ACK_PAYLOAD\fP   (1<<1)"
.br
.ti -1c
.RI "#define \fBNRF_FEATURE_DPL\fP   (1<<2)"
.br
.ti -1c
.RI "#define \fBNRF_RF_SETUP_RF_DR_LOW\fP   (1<<5)"
.br
.ti -1c
.RI "#define \fBNRF_RF_SETUP_RF_DR_HIGH\fP   (1<<3)"
.br
.ti -1c
.RI "#define \fBNRF_RF_SETUP_RF_PWR\fP   (1<<1 | 1<<2)"
.br
.ti -1c
.RI "#define \fBNRF_SETUP_RETR_ARC\fP   (1<<0 | 1<<1 | 1<<2 | 1<<3)"
.br
.ti -1c
.RI "#define \fBNRF_SETUP_RETR_ARD\fP   (1<<4 | 1<<5 | 1<<6 | 1<<7)"
.br
.ti -1c
.RI "#define \fBNRF_MASK_PIPE0\fP   (1<<0)"
.br
.ti -1c
.RI "#define \fBNRF_MASK_PIPE1\fP   (1<<1)"
.br
.ti -1c
.RI "#define \fBNRF_MASK_PIPE2\fP   (1<<2)"
.br
.ti -1c
.RI "#define \fBNRF_MASK_PIPE3\fP   (1<<3)"
.br
.ti -1c
.RI "#define \fBNRF_MASK_PIPE4\fP   (1<<4)"
.br
.ti -1c
.RI "#define \fBNRF_MASK_PIPE5\fP   (1<<5)"
.br
.ti -1c
.RI "#define \fBNRF_CMD_READ_REGISTER\fP   0b00000000"
.br
.ti -1c
.RI "#define \fBNRF_CMD_WRITE_REGISTER\fP   0b00100000"
.br
.ti -1c
.RI "#define \fBNRF_CMD_READ_RX_PAYLOAD\fP   0b01100001"
.br
.ti -1c
.RI "#define \fBNRF_CMD_WRITE_TX_PAYLOAD\fP   0b10100000"
.br
.ti -1c
.RI "#define \fBNRF_CMD_FLUSH_TX\fP   0b11100001"
.br
.ti -1c
.RI "#define \fBNRF_CMD_FLUSH_RX\fP   0b11100010"
.br
.ti -1c
.RI "#define \fBNRF_CMD_REUSE_TX\fP   0b11100011"
.br
.ti -1c
.RI "#define \fBNRF_CMD_ACTIVATE\fP   0b01010000"
.br
.ti -1c
.RI "#define \fBNRF_CMD_READ_RX_PAYLOAD_WIDTH\fP   0b01100000"
.br
.ti -1c
.RI "#define \fBNRF_CMD_WRITE_ACK_PAYLOAD\fP   0b10101000"
.br
.ti -1c
.RI "#define \fBNRF_CMD_WRITE_TX_PAYLOAD_NO_ACK\fP   0b10110000"
.br
.ti -1c
.RI "#define \fBNRF_CMD_NOP\fP   0b11111111"
.br
.ti -1c
.RI "#define \fBNRF_REG_CONFIG\fP   0x00"
.br
.ti -1c
.RI "#define \fBNRF_REG_EN_AA\fP   0x01"
.br
.ti -1c
.RI "#define \fBNRF_REG_EN_RXADDR\fP   0x02"
.br
.ti -1c
.RI "#define \fBNRF_REG_SETUP_AW\fP   0x03"
.br
.ti -1c
.RI "#define \fBNRF_REG_SETUP_RETR\fP   0x04"
.br
.ti -1c
.RI "#define \fBNRF_REG_RF_CH\fP   0x05"
.br
.ti -1c
.RI "#define \fBNRF_REG_RF_SETUP\fP   0x06"
.br
.ti -1c
.RI "#define \fBNRF_REG_STATUS\fP   0x07"
.br
.ti -1c
.RI "#define \fBNRF_REG_OBSERVE_TX\fP   0x08"
.br
.ti -1c
.RI "#define \fBNRF_REG_RPD\fP   0x09"
.br
.ti -1c
.RI "#define \fBNRF_REG_RX_ADDR_P0\fP   0x0A"
.br
.ti -1c
.RI "#define \fBNRF_REG_RX_ADDR_P1\fP   0x0B"
.br
.ti -1c
.RI "#define \fBNRF_REG_RX_ADDR_P2\fP   0x0C"
.br
.ti -1c
.RI "#define \fBNRF_REG_RX_ADDR_P3\fP   0x0D"
.br
.ti -1c
.RI "#define \fBNRF_REG_RX_ADDR_P4\fP   0x0E"
.br
.ti -1c
.RI "#define \fBNRF_REG_RX_ADDR_P5\fP   0x0F"
.br
.ti -1c
.RI "#define \fBNRF_REG_TX_ADDR\fP   0x10"
.br
.ti -1c
.RI "#define \fBNRF_REG_RX_PW_P0\fP   0x11"
.br
.ti -1c
.RI "#define \fBNRF_REG_RX_PW_P1\fP   0x12"
.br
.ti -1c
.RI "#define \fBNRF_REG_RX_PW_P2\fP   0x13"
.br
.ti -1c
.RI "#define \fBNRF_REG_RX_PW_P3\fP   0x14"
.br
.ti -1c
.RI "#define \fBNRF_REG_RX_PW_P4\fP   0x15"
.br
.ti -1c
.RI "#define \fBNRF_REG_RX_PW_P5\fP   0x16"
.br
.ti -1c
.RI "#define \fBNRF_REG_FIFO_STATUS\fP   0x17"
.br
.ti -1c
.RI "#define \fBNRF_REG_DYNPD\fP   0x1C"
.br
.ti -1c
.RI "#define \fBNRF_REG_FEATURE\fP   0x1D"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBNRF_SPEED\fP { \fBNRF_SPEED_250K\fP = 0, \fBNRF_SPEED_1M\fP, \fBNRF_SPEED_2M\fP }"
.br
.ti -1c
.RI "enum \fBNRF_POWER\fP { \fBNRF_POWER_M18DBM\fP = 0, \fBNRF_POWER_M12DBM\fP, \fBNRF_POWER_M6DBM\fP, \fBNRF_POWER_0DBM\fP }"
.br
.ti -1c
.RI "enum \fBNRF_AW\fP { \fBNRF_AW_3\fP = 0, \fBNRF_AW_4\fP, \fBNRF_AW_5\fP }"
.br
.ti -1c
.RI "enum \fBNRF_CRC\fP { \fBNRF_CRC_DISABLED\fP = 0, \fBNRF_CRC_1B\fP, \fBNRF_CRC_2B\fP }"
.br
.ti -1c
.RI "enum \fBNRF_RETR_DELAY\fP { \fBNRF_RETR_DELAY_250US\fP = 0, \fBNRF_RETR_DELAY_500US\fP, \fBNRF_RETR_DELAY_750US\fP, \fBNRF_RETR_DELAY_1000US\fP, \fBNRF_RETR_DELAY_1250US\fP, \fBNRF_RETR_DELAY_1500US\fP, \fBNRF_RETR_DELAY_1750US\fP, \fBNRF_RETR_DELAY_2000US\fP, \fBNRF_RETR_DELAY_2250US\fP, \fBNRF_RETR_DELAY_2500US\fP, \fBNRF_RETR_DELAY_2750US\fP, \fBNRF_RETR_DELAY_3000US\fP, \fBNRF_RETR_DELAY_3250US\fP, \fBNRF_RETR_DELAY_3500US\fP, \fBNRF_RETR_DELAY_3750US\fP, \fBNRF_RETR_DELAY_4000US\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBrf_init\fP (void)"
.br
.ti -1c
.RI "void \fBrf_set_speed\fP (\fBNRF_SPEED\fP speed)"
.br
.ti -1c
.RI "void \fBrf_set_power\fP (\fBNRF_POWER\fP power)"
.br
.ti -1c
.RI "void \fBrf_set_address_width\fP (\fBNRF_AW\fP aw)"
.br
.ti -1c
.RI "void \fBrf_set_crc_type\fP (\fBNRF_CRC\fP crc_type)"
.br
.ti -1c
.RI "void \fBrf_set_retr_retries\fP (int retries)"
.br
.ti -1c
.RI "void \fBrf_set_retr_delay\fP (\fBNRF_RETR_DELAY\fP delay)"
.br
.ti -1c
.RI "void \fBrf_set_rx_addr\fP (int pipe, const char *address, int addr_len)"
.br
.ti -1c
.RI "void \fBrf_set_tx_addr\fP (const char *address, int addr_len)"
.br
.ti -1c
.RI "void \fBrf_write_tx_payload\fP (const char *data, int length)"
.br
.ti -1c
.RI "void \fBrf_write_tx_payload_no_ack\fP (const char *data, int length)"
.br
.ti -1c
.RI "void \fBrf_write_ack_payload\fP (int pipe, const char *data, int length)"
.br
.ti -1c
.RI "void \fBrf_read_rx_payload\fP (char *data, int length)"
.br
.ti -1c
.RI "void \fBrf_set_frequency\fP (int freq)"
.br
.ti -1c
.RI "int \fBrf_get_frequency\fP (void)"
.br
.ti -1c
.RI "int \fBrf_get_address_width\fP (void)"
.br
.ti -1c
.RI "void \fBrf_power_up\fP (void)"
.br
.ti -1c
.RI "void \fBrf_power_down\fP (void)"
.br
.ti -1c
.RI "void \fBrf_mode_tx\fP (void)"
.br
.ti -1c
.RI "void \fBrf_mode_rx\fP (void)"
.br
.ti -1c
.RI "void \fBrf_enable_pipe_autoack\fP (int pipes)"
.br
.ti -1c
.RI "void \fBrf_enable_pipe_address\fP (int pipes)"
.br
.ti -1c
.RI "void \fBrf_enable_pipe_dlp\fP (int pipes)"
.br
.ti -1c
.RI "void \fBrf_enable_features\fP (int features)"
.br
.ti -1c
.RI "void \fBrf_flush_tx\fP (void)"
.br
.ti -1c
.RI "void \fBrf_flush_rx\fP (void)"
.br
.ti -1c
.RI "void \fBrf_flush_all\fP (void)"
.br
.ti -1c
.RI "void \fBrf_clear_irq\fP (void)"
.br
.ti -1c
.RI "void \fBrf_clear_rx_irq\fP (void)"
.br
.ti -1c
.RI "void \fBrf_clear_tx_irq\fP (void)"
.br
.ti -1c
.RI "void \fBrf_clear_maxrt_irq\fP (void)"
.br
.ti -1c
.RI "int \fBrf_get_payload_width\fP (void)"
.br
.ti -1c
.RI "int \fBrf_status\fP (void)"
.br
.ti -1c
.RI "int \fBrf_fifo_status\fP (void)"
.br
.ti -1c
.RI "int \fBrf_rx_power_detect\fP (void)"
.br
.ti -1c
.RI "void \fBrf_write_reg\fP (int reg, const char *data, int len)"
.br
.ti -1c
.RI "void \fBrf_write_reg_byte\fP (int reg, char value)"
.br
.ti -1c
.RI "void \fBrf_read_reg\fP (int reg, char *data, int len)"
.br
.ti -1c
.RI "char \fBrf_read_reg_byte\fP (int reg)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define NRF_CMD_ACTIVATE   0b01010000"

.SS "#define NRF_CMD_FLUSH_RX   0b11100010"

.SS "#define NRF_CMD_FLUSH_TX   0b11100001"

.SS "#define NRF_CMD_NOP   0b11111111"

.SS "#define NRF_CMD_READ_REGISTER   0b00000000"

.SS "#define NRF_CMD_READ_RX_PAYLOAD   0b01100001"

.SS "#define NRF_CMD_READ_RX_PAYLOAD_WIDTH   0b01100000"

.SS "#define NRF_CMD_REUSE_TX   0b11100011"

.SS "#define NRF_CMD_WRITE_ACK_PAYLOAD   0b10101000"

.SS "#define NRF_CMD_WRITE_REGISTER   0b00100000"

.SS "#define NRF_CMD_WRITE_TX_PAYLOAD   0b10100000"

.SS "#define NRF_CMD_WRITE_TX_PAYLOAD_NO_ACK   0b10110000"

.SS "#define NRF_CONFIG_CRCO   (1<<2)"

.SS "#define NRF_CONFIG_EN_CRC   (1<<3)"

.SS "#define NRF_CONFIG_MASK_MAX_RT   (1<<4)"

.SS "#define NRF_CONFIG_MASK_RX_DR   (1<<6)"

.SS "#define NRF_CONFIG_MASK_TX_DS   (1<<5)"

.SS "#define NRF_CONFIG_PRIM_RX   (1<<0)"

.SS "#define NRF_CONFIG_PWR_UP   (1<<1)"

.SS "#define NRF_FEATURE_ACK_PAYLOAD   (1<<1)"

.SS "#define NRF_FEATURE_DPL   (1<<2)"

.SS "#define NRF_FEATURE_DYN_ACK   (1<<0)"

.SS "#define NRF_FIFO_RX_EMPTY   (1<<0)"

.SS "#define NRF_FIFO_RX_FULL   (1<<1)"

.SS "#define NRF_FIFO_TX_EMPTY   (1<<4)"

.SS "#define NRF_FIFO_TX_FULL   (1<<5)"

.SS "#define NRF_MASK_PIPE0   (1<<0)"

.SS "#define NRF_MASK_PIPE1   (1<<1)"

.SS "#define NRF_MASK_PIPE2   (1<<2)"

.SS "#define NRF_MASK_PIPE3   (1<<3)"

.SS "#define NRF_MASK_PIPE4   (1<<4)"

.SS "#define NRF_MASK_PIPE5   (1<<5)"

.SS "#define NRF_REG_CONFIG   0x00"

.SS "#define NRF_REG_DYNPD   0x1C"

.SS "#define NRF_REG_EN_AA   0x01"

.SS "#define NRF_REG_EN_RXADDR   0x02"

.SS "#define NRF_REG_FEATURE   0x1D"

.SS "#define NRF_REG_FIFO_STATUS   0x17"

.SS "#define NRF_REG_OBSERVE_TX   0x08"

.SS "#define NRF_REG_RF_CH   0x05"

.SS "#define NRF_REG_RF_SETUP   0x06"

.SS "#define NRF_REG_RPD   0x09"

.SS "#define NRF_REG_RX_ADDR_P0   0x0A"

.SS "#define NRF_REG_RX_ADDR_P1   0x0B"

.SS "#define NRF_REG_RX_ADDR_P2   0x0C"

.SS "#define NRF_REG_RX_ADDR_P3   0x0D"

.SS "#define NRF_REG_RX_ADDR_P4   0x0E"

.SS "#define NRF_REG_RX_ADDR_P5   0x0F"

.SS "#define NRF_REG_RX_PW_P0   0x11"

.SS "#define NRF_REG_RX_PW_P1   0x12"

.SS "#define NRF_REG_RX_PW_P2   0x13"

.SS "#define NRF_REG_RX_PW_P3   0x14"

.SS "#define NRF_REG_RX_PW_P4   0x15"

.SS "#define NRF_REG_RX_PW_P5   0x16"

.SS "#define NRF_REG_SETUP_AW   0x03"

.SS "#define NRF_REG_SETUP_RETR   0x04"

.SS "#define NRF_REG_STATUS   0x07"

.SS "#define NRF_REG_TX_ADDR   0x10"

.SS "#define NRF_RF_SETUP_RF_DR_HIGH   (1<<3)"

.SS "#define NRF_RF_SETUP_RF_DR_LOW   (1<<5)"

.SS "#define NRF_RF_SETUP_RF_PWR   (1<<1 | 1<<2)"

.SS "#define NRF_SETUP_RETR_ARC   (1<<0 | 1<<1 | 1<<2 | 1<<3)"

.SS "#define NRF_SETUP_RETR_ARD   (1<<4 | 1<<5 | 1<<6 | 1<<7)"

.SS "#define NRF_STATUS_GET_MAX_RT(s)   ((s & \fBNRF_STATUS_MAX_RT\fP) >> 4)"

.SS "#define NRF_STATUS_GET_RX_DR(s)   ((s & \fBNRF_STATUS_RX_DR\fP) >> 6)"

.SS "#define NRF_STATUS_GET_RX_P_NO(s)   ((s & \fBNRF_STATUS_RX_P_NO\fP) >> 1)"

.SS "#define NRF_STATUS_GET_TX_DS(s)   ((s & \fBNRF_STATUS_TX_DS\fP) >> 5)"

.SS "#define NRF_STATUS_GET_TX_FULL(s)   (s & \fBNRF_STATUS_TX_FULL\fP)"

.SS "#define NRF_STATUS_IRQ   (\fBNRF_STATUS_MAX_RT\fP | \fBNRF_STATUS_TX_DS\fP | \fBNRF_STATUS_RX_DR\fP)"

.SS "#define NRF_STATUS_MAX_RT   (1<<4)"

.SS "#define NRF_STATUS_RX_DR   (1<<6)"

.SS "#define NRF_STATUS_RX_P_NO   (1<<1 | 1<<2 | 1<<3)"

.SS "#define NRF_STATUS_TX_DS   (1<<5)"

.SS "#define NRF_STATUS_TX_FULL   (1<<0)"

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBNRF_AW\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINRF_AW_3 \fP\fP
.TP
\fB\fINRF_AW_4 \fP\fP
.TP
\fB\fINRF_AW_5 \fP\fP
.SS "enum \fBNRF_CRC\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINRF_CRC_DISABLED \fP\fP
.TP
\fB\fINRF_CRC_1B \fP\fP
.TP
\fB\fINRF_CRC_2B \fP\fP
.SS "enum \fBNRF_POWER\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINRF_POWER_M18DBM \fP\fP
.TP
\fB\fINRF_POWER_M12DBM \fP\fP
.TP
\fB\fINRF_POWER_M6DBM \fP\fP
.TP
\fB\fINRF_POWER_0DBM \fP\fP
.SS "enum \fBNRF_RETR_DELAY\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINRF_RETR_DELAY_250US \fP\fP
.TP
\fB\fINRF_RETR_DELAY_500US \fP\fP
.TP
\fB\fINRF_RETR_DELAY_750US \fP\fP
.TP
\fB\fINRF_RETR_DELAY_1000US \fP\fP
.TP
\fB\fINRF_RETR_DELAY_1250US \fP\fP
.TP
\fB\fINRF_RETR_DELAY_1500US \fP\fP
.TP
\fB\fINRF_RETR_DELAY_1750US \fP\fP
.TP
\fB\fINRF_RETR_DELAY_2000US \fP\fP
.TP
\fB\fINRF_RETR_DELAY_2250US \fP\fP
.TP
\fB\fINRF_RETR_DELAY_2500US \fP\fP
.TP
\fB\fINRF_RETR_DELAY_2750US \fP\fP
.TP
\fB\fINRF_RETR_DELAY_3000US \fP\fP
.TP
\fB\fINRF_RETR_DELAY_3250US \fP\fP
.TP
\fB\fINRF_RETR_DELAY_3500US \fP\fP
.TP
\fB\fINRF_RETR_DELAY_3750US \fP\fP
.TP
\fB\fINRF_RETR_DELAY_4000US \fP\fP
.SS "enum \fBNRF_SPEED\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINRF_SPEED_250K \fP\fP
.TP
\fB\fINRF_SPEED_1M \fP\fP
.TP
\fB\fINRF_SPEED_2M \fP\fP
.SH "Function Documentation"
.PP 
.SS "void rf_clear_irq (void)"

.SS "void rf_clear_maxrt_irq (void)"

.SS "void rf_clear_rx_irq (void)"

.SS "void rf_clear_tx_irq (void)"

.SS "void rf_enable_features (int features)"

.SS "void rf_enable_pipe_address (int pipes)"

.SS "void rf_enable_pipe_autoack (int pipes)"

.SS "void rf_enable_pipe_dlp (int pipes)"

.SS "int rf_fifo_status (void)"

.SS "void rf_flush_all (void)"

.SS "void rf_flush_rx (void)"

.SS "void rf_flush_tx (void)"

.SS "int rf_get_address_width (void)"

.SS "int rf_get_frequency (void)"

.SS "int rf_get_payload_width (void)"

.SS "void rf_init (void)"

.SS "void rf_mode_rx (void)"

.SS "void rf_mode_tx (void)"

.SS "void rf_power_down (void)"

.SS "void rf_power_up (void)"

.SS "void rf_read_reg (int reg, char * data, int len)"

.SS "char rf_read_reg_byte (int reg)"

.SS "void rf_read_rx_payload (char * data, int length)"

.SS "int rf_rx_power_detect (void)"

.SS "void rf_set_address_width (\fBNRF_AW\fP aw)"

.SS "void rf_set_crc_type (\fBNRF_CRC\fP crc_type)"

.SS "void rf_set_frequency (int freq)"

.SS "void rf_set_power (\fBNRF_POWER\fP power)"

.SS "void rf_set_retr_delay (\fBNRF_RETR_DELAY\fP delay)"

.SS "void rf_set_retr_retries (int retries)"

.SS "void rf_set_rx_addr (int pipe, const char * address, int addr_len)"

.SS "void rf_set_speed (\fBNRF_SPEED\fP speed)"

.SS "void rf_set_tx_addr (const char * address, int addr_len)"

.SS "int rf_status (void)"

.SS "void rf_write_ack_payload (int pipe, const char * data, int length)"

.SS "void rf_write_reg (int reg, const char * data, int len)"

.SS "void rf_write_reg_byte (int reg, char value)"

.SS "void rf_write_tx_payload (const char * data, int length)"

.SS "void rf_write_tx_payload_no_ack (const char * data, int length)"

.SH "Author"
.PP 
Generated automatically by Doxygen from the source code\&.
